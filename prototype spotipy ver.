from bs4 import BeautifulSoup
import random
from tkinter import *
import base64
import requests
import base64
import json
import spotipy
import sys
from spotipy.oauth2 import SpotifyClientCredentials

playlist_id = "6iGHel3ABNWuHU6253hyXq" #retrieving spotify playlist
    
spotify = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials(client_id="e127cc9c2d334beeb4de981ce039c16e", client_secret="d4b15e9693c84333ae6a8d172fc04753"))


#creates a list of artist name+song to use in analyser 
def analyse_return(playlist_id):
    global songlist
    songlist = []
    
    track_uris = [x["track"]["uri"] for x in spotify.playlist_tracks(playlist_id)["items"]]
    
    for i in spotify.playlist_tracks(playlist_id)["items"]:
        track_uri = i["track"]["uri"]
        name = i["track"]["name"]

        feats = spotify.audio_features(track_uri)[0]

        bpm = feats["tempo"]
        key = feats["key"]

        if key <= int(keys)+3 and key >= int(keys)-3:
            if int(bpm) <= bpm_range[0] and int(bpm) >= bpm_range[1]:
                songlist.append(name)

def OpenKeychanges(letter):
    global keys
    OpenKeyDic={
        1:["C","a"],
        2:["G","e"],
        3:["D","b"],
        4:["A","fh"],
        5:["E","ch"],
        6:["B","gh"],
        7:["Fh","el"],
        8:["Dl","bl"],
        9:["Al","f"],
        10:["El","c"],
        11:["Bl","g"],
        12:["F","d"],
    }
    for i in OpenKeyDic:
        for a in (0,1):
            if OpenKeyDic[i][a] == letter:
                keys = i

root  = Tk()
root.geometry("500x500")
myLabel_1 = Label(root,text="Welcome!!, enter your favourite beats and keys,We will generate the song it fits").pack()

Beats = StringVar()
Keys = StringVar()
URL = StringVar()

#_____________________
def generate(): #tkinter portion 
    global Beats, Keys, beats, keys, bpm_range
    
    beats = Beats.get()
    bpm_range = [int(beats)+10, int(beats)-10]
    letter = Keys.get()
    OpenKeychanges(letter)
    generating = Label(root,text = "We are generating the song it fits").pack
    Beats.set("")
    Keys.set("")
    
    analyse_return(playlist_id)
    output()
#     result = analyse()
#     print(result)

def similar_songs(): #tkinter portion 
    global beats, keys, bpm_range, URL
    
    url = URL.get()

    features = spotify.audio_features(url)[0]
    
    beats = features["tempo"]
    bpm_range = [int(beats)+10, int(beats)-10]
    keys = features["key"]
    generating = Label(root,text = "We are generating the song it fits").pack
    
    analyse_return(playlist_id)
    output()
    
label_beats = Label(root,text="Enter your desired beats per minute (BPM)").pack()
entry_beats = Entry(root,textvariable = Beats).pack()
label_keys = Label(root,text="Enter your desired music key").pack()
label_keys1 = Label(root, text = "Use capital letters for major key and lowercase letters for minor key; use 1 in place of ♭ and h for #").pack()
label_keys2 = Label(root, text = "ex. E♭ = Eb, c# = ch").pack()
entry_keys = Entry(root,textvariable = Keys).pack()

generate_buttom = Button(root,text="Click to generate songs that match your conditions",command = generate).pack()

label_song = Label(root, text = "Or enter the Spotify URL of a song you like, and we'll generate similar songs").pack()
entry_song = Entry(root, textvariable = URL).pack()

generate_buttom = Button(root,text="Click to Generate Similar Songs",command = similar_songs).pack()

def output():#outputvariable needed
    for songs in songlist:
        songname = Label(root,text = songs).pack()

root.mainloop()
